#!/bin/sh
# git-rehost-ipfs - rehost a git repo on ipfs

USAGE="usage: $0 [--unpack] [--existing <ipfs-url>] [-q/--quiet] [-k/--key] <git-repo> [<name>]"

die() {
	echo >&2 "$@"
	exit 1
}

print() {
	if [ -z "$QUIET" ]; then
		echo "$@"
	fi
}

quiet() {
	if [ ! -z "$QUIET" ]; then
		echo "-q"
	fi
}

UNPACK=
EXISTING=
url=
name=
QUIET=
KEY=
ipns=

[ "$#" -gt 0 ] || die "Not enough arguments\n$USAGE"

while [ "$#" -gt 0 ]
do
	case $1 in
	--unpack)
		UNPACK=1
		shift
		;;
	--existing)
		shift
		EXISTING="$1"
		[ -n "$EXISTING" ] || die "Invalid --existing argument\n$USAGE"
		shift
		;;
	-q|--quiet)
		shift
		QUIET=1
		;;
	-k|--key)
		shift
		KEY="$1"
		[ -n "$KEY" ] || die "Invalid --key argument\n$USAGE"
		shift
		;;
	--*)
		die "Unknown option $1\n$USAGE"
		;;
	*)
		if [ -z "$url" ]
		then
			url="$1"
			shift
		else
			if [ -z "$name" ]
			then
				name="$1"
				shift
			else
				die "Too many arguments ($1)\n$USAGE"
			fi
		fi
		;;
	esac
done

[ -n "$url" ] || die "Not enough or bad arguments\n$USAGE"
[ -n "$name" ] || name=$(basename "$url")

dir=$(mktemp -d -t git-ipfs-rehost-XXXXXX)
tohost="$dir/tohost"
repo="$dir/tohost/$name"

print
print "Rehosting: $url"
print

git clone --bare "$url" "$repo" $(quiet) || die "Could not clone '$url'"

cd "$repo" || die "Could not cd into '$repo'"

if [ -n "$EXISTING" ]
then
	case "$EXISTING" in
	/ipfs/*)
		# Ok
		;;
	*)
		die "Bad --existing argument '$EXISTING'\n" \
		    "It should start with '/ipfs/'"
		;;
	esac
	print "Getting packs from $EXISTING..."
	ipfs ls "$EXISTING/objects/pack" >"$tohost/ls_existing_$name.log" ||
		die "Could not ipfs ls '$EXISTING/objects/pack'"
	while read phash psize pname
	do
		case "$pname" in
		*\.pack)
			# We use </dev/null to avoid problems because stdin is opened,
			# as we are reading from a file in the enclosing while loop.
			ipfs cat "$EXISTING/objects/pack/$pname" >"objects/pack/$pname" </dev/null ||
				die "Could not ipfs cat '$EXISTING/objects/pack/$pname'"
			pidx=$(echo "$pname" | sed -e 's/\.pack$/.idx/')
			ipfs cat "$EXISTING/objects/pack/$pidx" >"objects/pack/$pidx" </dev/null ||
				die "Could not ipfs cat '$EXISTING/objects/pack/$pidx'"
			pkeep=$(echo "$pname" | sed -e 's/\.pack$/.keep/')
			touch "objects/pack/$pkeep"
			;;
		*)
			;;
		esac
	done <"$tohost/ls_existing_$name.log"
fi

if [ "$UNPACK" = 1 ]
then
	if ls objects/pack/*.pack >/dev/null 2>&1
	then
		print "Unpacking..."
		mv objects/pack/*.pack . || die "Could not move packs"

		# Unfortunately some shells like dash don't perform globing
		# after "<", so "git unpack-objects < *.pack" doesn't work.
		cat *.pack | git unpack-objects $(quiet) || die "Could not unpack packs"

		rm -f *.pack || die "Could not remove packs"
		rm -f objects/pack/*.idx || die "Could not remove pack indexes"
	fi
else
	print "Packing..."
	# This should pack and remove unwanted and unneeded objects
	git gc $(quiet) || die "Could not garbage collect"

	# Create .keep files so that the .pack files will be kept
	for pack in objects/pack/*.pack
	do
		keep=$(echo "$pack" | sed -e 's/\.pack$/.keep/')
		touch "$keep"
	done
fi

print "Updating server info..."
git update-server-info || die "Could not update-server-info"

print "Adding to IPFS..."
ipfs add -q -r "$tohost" >"$tohost/add_$name.log" || die "Could not add '$tohost'"
hash=$(tail -n1 "$tohost/add_$name.log")

if [ ! -z "$KEY" ]; then
	print "Publishing to IPNS with key $KEY..."

	ipfs name publish -Q --key="$KEY" "/ipfs/$hash" > "$tohost/ipns_publish.log" || die "Could not publlish ipns name to key $KEY"
	ipns=$(tail -n1 "$tohost/ipns_publish.log")
fi

print "done."
print
print "Repo rehosted at:"
print
print "  https://ipfs.io/ipfs/$hash/$name"
if [ ! -z "$KEY" ]; then
print "  https://ipfs.io/ipns/$ipns/$name"
fi
print
print "You can clone it with:"
print
print "  git clone https://ipfs.io/ipfs/$hash/$name"
if [ ! -z "$KEY" ]; then
print
print "OR"
print
print "  git clone https://ipfs.io/ipns/$ipns/$name"
fi
print

if [ ! -z "$QUIET" ]; then
	if [ ! -z "$KEY" ]; then
		echo "/ipns/$ipns"
	else
		echo "$hash"
	fi
fi
